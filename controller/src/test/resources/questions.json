[
  {
    "title": "Is Java \"pass-by-reference\" or \"pass-by-value\"?",
    "content": "I always thought Java uses **pass-by-reference**.\n\nHowever, I've seen [a blog post][1] that claims that Java uses **pass-by-value**.\n\nI don't think I understand the distinction they're making.\n\nWhat is the explanation?\n\n  [1]: http://javadude.com/articles/passbyvalue.htm\n",
    "votes": 97,
    "tags": [
      "java"
    ],
    "comments": [
      {
        "content": "We would more commonly say that a variable \"passed-by-reference\" can be mutated. The term appears in textbooks because language theorists needed a way to distinguish how you treat primitive data types (int, bool, byte) from complex and structured objects (array, streams, class) -- that is to say, those of possibly unbounded memory allocation.",
        "votes": 5
      },
      {
        "content": "I want to note that you do not have to think about this in most cases. I programmed java for many years until i learned c++. Until this point in time i had no clue what pass-by-reference and pass-by-value are. The intuitive solution always worked for me, which is why java is one of the best languages for beginners. So if you currently are worried, if your function needs a reference or a value, just pass it as it is and you will be fine.",
        "votes": 4
      },
      {
        "content": "Java pass the reference by value.",
        "votes": 54
      },
      {
        "content": "Putting it very concisely, this confusion arises because in Java all non-primitive data types are handled/accessed by references. However, passing is always be value. So for all non-primitive types reference is passed by its value. All primitive types are also passed by value.",
        "votes": 15
      }
    ],
    "answers": [
      {
        "content": "The terms \"pass-by-value\" and \"pass-by-reference\" have special, [precisely defined](https://en.wikipedia.org/w/index.php?title=Pass-by-value) meanings in computer science. These meanings differ from the intuition many people have when first hearing the terms. Much of the confusion in this discussion seems to come from this fact.\n\nThe terms \"pass-by-value\" and \"pass-by-reference\" are talking about _variables._ Pass-by-value means that the _value_ of a variable is passed to a function/method. Pass-by-reference means that a _reference_ to that variable is passed to the function. The latter gives the function a way to change the contents of the variable. \n\nBy those definitions, Java is always **pass-by-value**.  Unfortunately, when we deal with variables holding objects we are really dealing with object-handles called _references_ which are passed-by-value as well.  This terminology and semantics easily confuse many beginners.\n\nIt goes like this:\n ```java\npublic static void main(String[] args) {\n    Dog aDog = new Dog(\"Max\");\n    Dog oldDog = aDog;\n\n    // we pass the object to foo\n    foo(aDog);\n    // aDog variable is still pointing to the \"Max\" dog when foo(...) returns\n    aDog.getName().equals(\"Max\"); // true\n    aDog.getName().equals(\"Fifi\"); // false\n    aDog == oldDog; // true\n}\n\npublic static void foo(Dog d) {\n    d.getName().equals(\"Max\"); // true\n    // change d inside of foo() to point to a new Dog instance \"Fifi\"\n    d = new Dog(\"Fifi\");\n    d.getName().equals(\"Fifi\"); // true\n}\n```\nIn the example above `aDog.getName()` will still return `\"Max\"`. The value `aDog` within `main` is not changed in the function `foo` with the `Dog` `\"Fifi\"` as the object reference is passed by value. If it were passed by reference, then the `aDog.getName()` in `main` would return `\"Fifi\"` after the call to `foo`.\n\nLikewise:\n```java\npublic static void main(String[] args) {\n    Dog aDog = new Dog(\"Max\");\n    Dog oldDog = aDog;\n\n    foo(aDog);\n    // when foo(...) returns, the name of the dog has been changed to \"Fifi\"\n    aDog.getName().equals(\"Fifi\"); // true\n    // but it is still the same dog:\n    aDog == oldDog; // true\n}\n\npublic static void foo(Dog d) {\n    d.getName().equals(\"Max\"); // true\n    // this changes the name of d to be \"Fifi\"\n    d.setName(\"Fifi\");\n}\n```\nIn the above example, `Fifi` is the dog's name after call to `foo(aDog)` because the object's name was set inside of `foo(...)`. Any operations that `foo` performs on `d` are such that, for all practical purposes, they are performed on `aDog`, but it is **not** possible to change the value of the variable `aDog` itself.\n\n  [1]: http://ideone.com/oUEPbg\n\nFor more information on pass by reference and pass by value, consult the following answer: https://stackoverflow.com/a/430958/6005228. This explains more thoroughly the semantics and history behind the two and also explains why Java and many other modern languages appear to do both in certain cases.",
        "votes": 91,
        "accepted": 1,
        "comments": [
          {
            "content": "To me, saying that an object's reference is passed by value is the same as saying that the object is passed by reference. I'm a Java novice, but I presume that (in contrast) primitive data is pass by value.",
            "votes": 80
          }
        ]
      },
      {
        "content": "I just noticed you referenced [my article][1].\n\nThe Java Spec says that everything in Java is pass-by-value. There is no such thing as \"pass-by-reference\" in Java.\n\nThe key to understanding this is that something like\n```java\nDog myDog;\n```\n\nis _not_ a Dog; it's actually a _pointer_ to a Dog. The use of the term \"reference\" in Java is very misleading and is what causes most of the confusion here. What they call \"references\" act/feel more like what we'd call \"pointers\" in most other languages.\n\nWhat that means, is when you have\n```java\nDog myDog = new Dog(\"Rover\");\nfoo(myDog);\n```\nyou're essentially passing the _address_ of the created `Dog` object to the `foo` method.\n\n(I say essentially because Java pointers/references aren't direct addresses, but it's easiest to think of them that way.)\n\nSuppose the `Dog` object resides at memory address 42. This means we pass 42 to the method.\n\nif the Method were defined as\n```java\npublic void foo(Dog someDog) {\n    someDog.setName(\"Max\");     // AAA\n    someDog = new Dog(\"Fifi\");  // BBB\n    someDog.setName(\"Rowlf\");   // CCC\n}\n```\nlet's look at what's happening.\n\n   * the parameter `someDog` is set to the value 42\n   * at line \"AAA\"\n      * `someDog` is followed to the `Dog` it points to (the `Dog` object at address 42)\n      * that `Dog` (the one at address 42) is asked to change his name to Max\n   * at line \"BBB\"\n      * a new `Dog` is created. Let's say he's at address 74\n      * we assign the parameter `someDog` to 74 \n   * at line \"CCC\"\n      * someDog is followed to the `Dog` it points to (the `Dog` object at address 74)\n      * that `Dog` (the one at address 74) is asked to change his name to Rowlf\n   * then, we return\n\nNow let's think about what happens outside the method:\n\n*Did `myDog` change?*\n\nThere's the key.\n\nKeeping in mind that `myDog` is a *pointer*, and not an actual `Dog`, the answer is NO. `myDog` still has the value 42; it's still pointing to the original `Dog` (but note that because of line \"AAA\", its name is now \"Max\" - still the same Dog; `myDog`'s value has not changed.)\n\nIt's perfectly valid to *follow* an address and change what's at the end of it; that does not change the variable, however.\n\n\nJava works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, the caller will not see any changes you make to where that pointer points. (In a language with pass-by-reference semantics, the method function _can_ change the pointer and the caller will see that change.)\n\nIn C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.\n\nIf Java had pass-by-reference semantics, the `foo` method we defined above would have changed where `myDog` was pointing when it assigned `someDog` on line BBB.\n\nThink of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.\n\n## Update\nA discussion in the comments warrants some clarification...\n\nIn C, you can write\n\n```c\nvoid swap(int *x, int *y) {\n    int t = *x;\n    *x = *y;\n    *y = t;\n}\n\nint x = 1;\nint y = 2;\nswap(&x, &y);\n```\n\nThis is not a special case in C. Both languages use pass-by-value semantics. Here the call site is creating additional data structure to assist the function to access and manipulate data. \n\nThe function is being passed pointers to data, and follows those pointers to access and modify that data.\n\nA similar approach in Java, where the caller sets up assisting structure, might be:\n\n```java\nvoid swap(int[] x, int[] y) {\n    int temp = x[0];\n    x[0] = y[0];\n    y[0] = temp;\n}\n\nint[] x = {1};\nint[] y = {2};\nswap(x, y);\n```\n\n(or if you wanted both examples to demonstrate features the other language doesn't have, create a mutable IntWrapper class to use in place of the arrays)\n\nIn these cases, both C and Java are *simulating* pass-by-reference. They're still both passing values (pointers to ints or arrays), and following those pointers inside the called function to manipulate the data.\n\nPass-by-reference is all about the function *declaration/definition*, and how it handles its parameters. Reference semantics apply to *every* call to that function, and the call site only needs to pass variables, no additional data structure.\n\nThese simulations require the call site and the function to cooperate. No doubt it's useful, but it's still pass-by-value.\n\n  [1]: http://javadude.com/articles/passbyvalue.htm",
        "votes": 89,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "Java is always pass by value, with no exceptions, **ever**.\n\nSo how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java **never** provides direct access to the values of *objects themselves*, in *any* circumstances. The only access to objects is through a _reference_ to that object. Because Java objects are *always* accessed through a reference, rather than directly, it is common to talk about fields and variables *and method arguments* as being *objects*, when pedantically they are only *references to objects*. **The confusion stems from this (strictly speaking, incorrect) change in nomenclature.**\n\nSo, when calling a method\n\n* For primitive arguments (`int`, `long`, etc.), the pass by value is *the actual value* of the primitive (for example, 3).\n* For objects, the pass by value is the value of *the reference to the object*.\n\nSo if you have `doSomething(foo)` and `public void doSomething(Foo foo) { .. }` the two Foos have copied *references* that point to the same objects.\n\nNaturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.",
        "votes": 30,
        "accepted": 0,
        "comments": [
          {
            "content": "Java always passes arguments by value, but what you are passing by value is a reference to an object, not a copy of the object. Simple eh?",
            "votes": 57
          }
        ]
      },
      {
        "content": "Java passes references by value.\n\nSo you can't change the reference that gets passed in.",
        "votes": 30,
        "accepted": 0,
        "comments": [
          {
            "content": "What a beautiful and concised explaination",
            "votes": 5
          }
        ]
      }
    ]
  },
  {
    "title": "Why is subtracting these two times (in 1927) giving a strange result?",
    "content": "If I run the following program, which parses two date strings referencing times 1 second apart and compares them:\n```java\npublic static void main(String[] args) throws ParseException {\n\tSimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");  \n\tString str3 = \"1927-12-31 23:54:07\";  \n\tString str4 = \"1927-12-31 23:54:08\";  \n\tDate sDt3 = sf.parse(str3);  \n\tDate sDt4 = sf.parse(str4);  \n\tlong ld3 = sDt3.getTime() /1000;  \n\tlong ld4 = sDt4.getTime() /1000;\n\tSystem.out.println(ld4-ld3);\n}\n```\n**The output is:**\n```java\n353\n```\nWhy is `ld4-ld3`, not `1` (as I would expect from the one-second difference in the times), but `353`?\n\nIf I change the dates to times 1 second later:\n```java\nString str3 = \"1927-12-31 23:54:08\";  \nString str4 = \"1927-12-31 23:54:09\";  \n```\nThen `ld4-ld3` will be `1`.\n\n----------\n\n**Java version:**\n```java\njava version \"1.6.0_22\"\nJava(TM) SE Runtime Environment (build 1.6.0_22-b04)\nDynamic Code Evolution Client VM (build 0.2-b02-internal, 19.0-b04-internal, mixed mode)\n```\n```java\nTimezone(`TimeZone.getDefault()`):\n\nsun.util.calendar.ZoneInfo[id=\"Asia/Shanghai\",\noffset=28800000,dstSavings=0,\nuseDaylight=false,\ntransitions=19,\nlastRule=null]\n\nLocale(Locale.getDefault()): zh_CN\n```",
    "votes": 98,
    "tags": [
      "java"
    ],
    "comments": [
      {
        "content": "The real answer is to always, always use seconds since an epoch for logging, like the Unix epoch, with 64 bit integer representation (signed, if you want to allow stamps before the epoch). Any real-world time system has some non-linear, non-monotonic behaviour like leap hours or daylight savings.",
        "votes": 55
      }
    ],
    "answers": [
      {
        "content": "It's a time zone change on December 31st in Shanghai.\n\nSee [this page][1] for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So \"1927-12-31 23:54:08\" actually happened twice, and it looks like Java is parsing it as the *later* possible instant for that local date/time - hence the difference.\n\nJust another episode in the often weird and wonderful world of time zones.\n\n**EDIT:** Stop press! History changes...\n\nThe original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of [TZDB][2]. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.\n\nI only noticed this because I'm collecting questions like this in Noda Time, in the form of [unit tests][3]... The test has now been changed, but it just goes to show - not even historical data is safe.\n\n**EDIT:** History has changed again...\n\nIn TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between `t` and `t+1` is 344 seconds, if you see what I mean).\n\n**EDIT:** To answer a question around a transition at 1900... it looks like the Java timezone implementation treats *all* time zones as simply being in their standard time for any instant before the start of 1900 UTC:\n```java\nimport java.util.TimeZone;\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        long startOf1900Utc = -2208988800000L;\n        for (String id : TimeZone.getAvailableIDs()) {\n            TimeZone zone = TimeZone.getTimeZone(id);\n            if (zone.getRawOffset() != zone.getOffset(startOf1900Utc - 1)) {\n                System.out.println(id);\n            }\n        }\n    }\n}\n```\nThe code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a \"fixed\" standard time (which is what `getRawOffset` assumes to be a valid concept) so other libraries needn't introduce this artificial transition.\n\n\n  [1]: http://www.timeanddate.com/worldclock/clockchange.html?n=237&year=1927\n  [2]: https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\n  [3]: https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\n",
        "votes": 77,
        "accepted": 1,
        "comments": []
      },
      {
        "content": "You've encountered a [local time discontinuity][1]:\n\n> When local standard time was about to reach Sunday, 1. January 1928,\n> 00:00:00 clocks were turned backward 0:05:52 hours to Saturday, 31.\n> December 1927, 23:54:08 local standard time instead\n\nThis is not particularly strange and has happened pretty much everywhere at one time or another as timezones were switched or changed due to political or administrative actions.\n\n\n  [1]: http://timeanddate.com/worldclock/clockchange.html?n=237&year=1927",
        "votes": 13,
        "accepted": 0,
        "comments": [
          {
            "content": "It happens twice a year anywhere that observes DST.",
            "votes": 11
          },
          {
            "content": "This one is not DST, I think. It's only 10 minutes back, and only once. At the same time, DST related changes can happen twice a year... or 4 times a year (due to Ramadan). or even once a year in some setups. No rule there :)",
            "votes": 5
          }
        ]
      },
      {
        "content": "The moral of this strangeness is:\n\n- Use dates and times in UTC wherever possible.\n- If you can not display a date or time in UTC, always indicate the time-zone.\n- If you can not require an input date/time in UTC, require an explicitly indicated time-zone.",
        "votes": 13,
        "accepted": 0,
        "comments": [
          {
            "content": "None of these points would affect this result - it falls squarely under the third bullet point - and moreover, this is a time several decades before UTC was even defined, and thus can not really meaningfully be expressed in UTC.",
            "votes": 3
          }
        ]
      }
    ]
  },
  {
    "title": "How do I read / convert an InputStream into a String in Java?",
    "content": "If you have a `java.io.InputStream` object, how should you process that object and produce a `String`?\n\n---\nSuppose I have an `InputStream` that contains text data, and I want to convert it to a `String`, so for example I can write that to a log file.\n\nWhat is the easiest way to take the `InputStream` and convert it to a `String`?\n```java\npublic String convertStreamToString(InputStream is) {\n// ???\n}\n```",
    "votes": 74,
    "tags": [
      "java"
    ],
    "comments": [
      {
        "content": "Most of these answers were written pre-Java 9, but now you can get a byte array from the InputStream using .readAllBytes. So, simply \"new String(inputStream.readAllBytes())\" works using String's byte[] constructor.",
        "votes": 3
      }
    ],
    "answers": [
      {
        "content": "Here's a way using only the standard Java library (note that the stream is not closed, your mileage may vary).\n```java\nstatic String convertStreamToString(java.io.InputStream is) {\n    java.util.Scanner s = new java.util.Scanner(is).useDelimiter(\"\\\\A\");\n    return s.hasNext() ? s.next() : \"\";\n}\n```\nI learned this trick from [\"Stupid Scanner tricks\"][1] article. The reason it works is because [Scanner][2] iterates over tokens in the stream, and in this case we separate tokens using \"beginning of the input boundary\" (\\A), thus giving us only one token for the entire contents of the stream.\n\n**Note, if you need to be specific about the input stream's encoding, you can provide the second argument to `Scanner` constructor that indicates what character set to use (e.g. \"UTF-8\").**\n\nHat tip goes also to [Jacob][3], who once pointed me to the said article.\n\n  [1]: https://community.oracle.com/blogs/pat/2004/10/23/stupid-scanner-tricks\n  [2]: http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html\n  [3]: https://stackoverflow.com/users/68127/jacob-gabrielson\n  [4]: https://stackoverflow.com/users/101272/patrick\n\n\n",
        "votes": 15,
        "accepted": 1,
        "comments": [
          {
            "content": "Shouldn't we close the scanner before returning the value?",
            "votes": 1
          }
        ]
      },
      {
        "content": "Apache Commons allows:\n```java\nString myString = IOUtils.toString(myInputStream, \"UTF-8\");\n```\nOf course, you could choose other character encodings besides UTF-8.\n\nAlso see: ([documentation][1])\n\n  [1]: http://commons.apache.org/proper/commons-io/javadocs/api-2.4/org/apache/commons/io/IOUtils.html#toString%28java.io.InputStream,%20java.lang.String\n\n",
        "votes": 8,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "Taking into account file one should first get a `java.io.Reader` instance. This can then be read and added to a `StringBuilder` (we don't need `StringBuffer` if we are not accessing it in multiple threads, and `StringBuilder` is faster). The trick here is that we work in blocks, and as such don't need other buffering streams. The block size is parameterized for run-time performance optimization.\n```java\npublic static String slurp(final InputStream is, final int bufferSize) {\n    final char[] buffer = new char[bufferSize];\n    final StringBuilder out = new StringBuilder();\n    try (Reader in = new InputStreamReader(is, \"UTF-8\")) {\n        for (;;) {\n            int rsz = in.read(buffer, 0, buffer.length);\n            if (rsz < 0)\n                break;\n            out.append(buffer, 0, rsz);\n        }\n    }\n    catch (UnsupportedEncodingException ex) {\n        /* ... */\n    }\n    catch (IOException ex) {\n        /* ... */\n    }\n    return out.toString();\n}\n```",
        "votes": 11,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "For completeness here is **Java 9** solution:\n```java\npublic static String toString(InputStream input) throws IOException {\n    return new String(input.readAllBytes(), StandardCharsets.UTF_8);\n}\n```\nThis uses the [`readAllBytes`](https://docs.oracle.com/javase/9/docs/api/java/io/InputStream.html#readAllBytes--) method which was added to Java 9.",
        "votes": 5,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "Create ArrayList from array",
    "content": "Given an array of type `Element[]`:\n```java\nElement[] array = {new Element(1), new Element(2), new Element(3)};\n```\nHow do I convert this array into an object of type [`ArrayList<Element>`][1]?\n```java\nArrayList<Element> arrayList = ???;\n```\n\n  [1]: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ArrayList.html",
    "votes": 55,
    "tags": [
      "java"
    ],
    "comments": [
    ],
    "answers": [
      {
        "content": "```java\nnew ArrayList<>(Arrays.asList(array));\n```",
        "votes": 57,
        "accepted": 1,
        "comments": [
          {
            "content": "Arrays.asList() is a horrible function, and you should never just use its return value as is. It breaks the List template, so always use it in the form indicated here, even if it does seem redundant. Good answer.",
            "votes": 26
          },
          {
            "content": "Please study the javadoc for java.util.List. The contract for add allows them to throw an UnsupportedOperationException. Admittedly, from an object-oriented perspective it is not very nice that many times you have to know the concrete implementation in order to use a collection - this was a pragmatic design choice in order to keep the framework simple.",
            "votes": 36
          }
        ]
      },
      {
        "content": "Given:\n```java\nElement[] array = new Element[] { new Element(1), new Element(2), new Element(3) };\n```\nThe simplest answer is to do:\n```java\nList<Element> list = Arrays.asList(array);\n```\nThis will work fine.  But some caveats:\n\n 1. The list returned from asList has **fixed size**.  So, if you want to be able to add or remove elements from the returned list in your code, you'll need to wrap it in a new `ArrayList`.  Otherwise you'll get an `UnsupportedOperationException`.\n 2. The list returned from `asList()` is backed by the original array.  If you modify the original array, the list will be modified as well.  This may be surprising. \n",
        "votes": 34,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "# If You Can, Use Guava\n\nIt's worth pointing out the Guava way, which greatly simplifies these shenanigans:\n\n## Usage\n\n### For an Immutable List\n\nUse the [`ImmutableList`][1] class and its [`of()`][2] and [`copyOf()`][3] factory methods <sup>(elements can't be null)</sup>:\n```java\nList<String> il = ImmutableList.of(\"string\", \"elements\");  // from varargs\nList<String> il = ImmutableList.copyOf(aStringArray);      // from array\n```\n### For A Mutable List\n\nUse the [`Lists`][4] class and its [`newArrayList()`][5] factory methods:\n```java\nList<String> l1 = Lists.newArrayList(anotherListOrCollection);    // from collection\nList<String> l2 = Lists.newArrayList(aStringArray);               // from array\nList<String> l3 = Lists.newArrayList(\"or\", \"string\", \"elements\"); // from varargs\n```\nPlease also note the similar methods for other data structures in other classes, for instance in [`Sets`][6].\n\n## [Why Guava?][7]\n\nThe main attraction could be to reduce the clutter due to generics for type-safety, as the use of the Guava [factory methods][8] allow the types to be inferred most of the time. However, this argument holds less water since Java 7 arrived with the new diamond operator.\n\nBut it's not the only reason (and Java 7 isn't everywhere yet): the shorthand syntax is also very handy, and the methods initializers, as seen above, allow to write more expressive code. You do in one Guava call what takes 2 with the current Java Collections.\n\n-----\n\n# If You Can't...\n\n## For an Immutable List\n\nUse the JDK's [`Arrays`][9] class and its [`asList()`][10] factory method, wrapped with a [`Collections.unmodifiableList()`][11]:\n```java\nList<String> l1 = Collections.unmodifiableList(Arrays.asList(anArrayOfElements));\nList<String> l2 = Collections.unmodifiableList(Arrays.asList(\"element1\", \"element2\"));\n```\nNote that the returned type for `asList()` is a `List` using a concrete `ArrayList` implementation, but **it is NOT** `java.util.ArrayList`. It's an inner type, which emulates an `ArrayList` but actually directly references the passed array and makes it \"write through\" (modifications are reflected in the array).\n\nIt forbids modifications through some of the `List` API's methods by way of simply extending an `AbstractList` (so, adding or removing elements is unsupported), however it allows calls to `set()` to override elements. Thus this list isn't truly immutable and a call to `asList()` should be wrapped with `Collections.unmodifiableList()`.\n\nSee the next step if you need a mutable list.\n\n## For a Mutable List\n\nSame as above, but wrapped with an actual `java.util.ArrayList`:\n```java\nList<String> l1  = new ArrayList<String>(Arrays.asList(array));    // Java 1.5 to 1.6\nList<String> l1b = new ArrayList<>(Arrays.asList(array));          // Java 1.7+\nList<String> l2  = new ArrayList<String>(Arrays.asList(\"a\", \"b\")); // Java 1.5 to 1.6\nList<String> l2b = new ArrayList<>(Arrays.asList(\"a\", \"b\"));       // Java 1.7+\n```\n----\n\n# For Educational Purposes: The Good ol' Manual Way\n```java\n// for Java 1.5+\nstatic <T> List<T> arrayToList(final T[] array) {\nfinal List<T> l = new ArrayList<T>(array.length);\n\n  for (final T s : array) {\n    l.add(s);\n  }\n  return (l);\n}\n\n// for Java < 1.5 (no generics, no compile-time type-safety, boo!)\nstatic List arrayToList(final Object[] array) {\n  final List l = new ArrayList(array.length);\n   for (int i = 0; i < array.length; i++) {\n    l.add(array[i]);\n  }\n  return (l);\n}\n```\n\n   [1]: https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java\n  [2]: https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L108\n  [3]: https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/ImmutableList.java#L235\n  [4]: https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java\n  [5]: https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Lists.java#L84\n  [6]: https://github.com/google/guava/blob/master/guava/src/com/google/common/collect/Sets.java\n  [7]: https://github.com/google/guava/wiki\n  [8]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors\n  [9]: https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html\n  [10]: https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)\n  [11]: https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Collections.html#unmodifiableList(java.util.List)",
        "votes": 41,
        "accepted": 0,
        "comments": [
          {
            "content": "But note that the List returned by Arrays.asList is mutable in that you can still set elements - it just isn't resizable. For immutable lists without Guava you might mention Collections.unmodifiableList",
            "votes": 22
          }
        ]
      }
    ]
  },
  {
    "title": "Avoiding NullPointerException in Java",
    "content": "I use `x != null` to avoid [`NullPointerException`][1]. Is there an alternative?\n\n```java\nif (x != null) {\n    // ...\n}\n``` \n\n[1]:https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html",
    "votes": 45,
    "tags": [
      "java"
    ],
    "comments": [
      {
        "content": "Not using null is superior to most other suggestions here. Throw exceptions, don't return or allow nulls. BTW - 'assert' keyword is useless, because it's disabled by default. Use an always-enabled failure mechanism",
        "votes": 12
      },
      {
        "content": "Nulls should be avoided in high-level code. Tony Hoare, who invented null references, calls them \"a billion-dollar mistake\".",
        "votes": 3
      }
    ],
    "answers": [
      {
        "content": "This to me sounds like a reasonably common problem that junior to intermediate developers tend to face at some point: they either don't know or don't trust the contracts they are participating in and defensively overcheck for nulls.  Additionally, when writing their own code, they tend to rely on returning nulls to indicate something thus requiring the caller to check for nulls.\n\nTo put this another way, there are two instances where null checking comes up:\n\n 1. Where null is a valid response in terms of the contract; and\n\n 2. Where it isn't a valid response.\n\n(2) is easy.  As of Java 1.7 you can use [`Objects.requireNonNull(foo)`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Objects.html#requireNonNull(T)). (If you are stuck with a previous version then [`assert`ions](https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html) may be a good alternative.)\n\n\"Proper\" usage of this method would be like below. The method returns the object passed into it and throws a `NullPointerException` if the object is null. This means that the returned value is always non-null. The method is primarily intended for validating parameters.\n```java\npublic Foo(Bar bar) {\n    this.bar = Objects.requireNonNull(bar);\n}\n```\nIt can also be used like an `assert`ion though since it throws an exception if the object is null. In both uses, a message can be added which will be shown in the exception. Below is using it like an assertion and providing a message.\n```java\nObjects.requireNonNull(someobject, \"if someobject is null then something is wrong\");\nsomeobject.doCalc();\n```\nGenerally throwing a specific exception like `NullPointerException` when a value is null but shouldn't be is favorable to throwing a more general exception like `AssertionError`. This is the approach the Java library takes; favoring `NullPointerException` over `IllegalArgumentException` when an argument is not allowed to be null.\n\n(1) is a little harder.  If you have no control over the code you're calling then you're stuck.  If null is a valid response, you have to check for it.\n\nIf it's code that you do control, however (and this is often the case), then it's a different story.  Avoid using nulls as a response.  With methods that return collections, it's easy: return empty collections (or arrays) instead of nulls pretty much all the time.\n\nWith non-collections it might be harder.  Consider this as an example: if you have these interfaces:\n```java\npublic interface Action {\n  void doSomething();\n}\n```\n```java    \npublic interface Parser {\n  Action findAction(String userInput);\n}\n```\nwhere Parser takes raw user input and finds something to do, perhaps if you're implementing a command line interface for something.  Now you might make the contract that it returns null if there's no appropriate action.  That leads the null checking you're talking about.\n\nAn alternative solution is to never return null and instead use the [Null Object pattern][1]:\n```java\npublic class MyParser implements Parser {\n  private static Action DO_NOTHING = new Action() {\n    public void doSomething() { /* do nothing */ }\n  };\n\n  public Action findAction(String userInput) {\n    // ...\n    if ( /* we can't find any actions */ ) {\n      return DO_NOTHING;\n    }\n  }\n}\n```\nCompare:\n```java\nParser parser = ParserFactory.getParser();\nif (parser == null) {\n  // now what?\n  // this would be an example of where null isn't (or shouldn't be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n  // do nothing\n} else {\n  action.doSomething();\n}\n```\nto\n```java\n    ParserFactory.getParser().findAction(someInput).doSomething();\n```\nwhich is a much better design because it leads to more concise code.\n\nThat said, perhaps it is entirely appropriate for the findAction() method to throw an Exception with a meaningful error message -- especially in this case where you are relying on user input.  It would be much better for the findAction method to throw an Exception than for the calling method to blow up with a simple NullPointerException with no explanation.\n```java\ntry {\n    ParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\n    userConsole.err(anfe.getMessage());\n}\n```\nOr if you think the try/catch mechanism is too ugly, rather than Do Nothing your default action should provide feedback to the user.\n```java\npublic Action findAction(final String userInput) {\n    /* Code to return requested Action if found */\n    return new Action() {\n        public void doSomething() {\n            userConsole.err(\"Action not found: \" + userInput);\n        }\n    }\n}\n```\n  [1]: https://en.wikipedia.org/wiki/Null_Object_pattern",
        "votes": 67,
        "accepted": 1,
        "comments": [
          {
            "content": "Nice answer, especially mentioning asserts. I came from C and use them constantly. As to Null Objects, they are NOT a silver bullet. I have often spent hours debugging code which turned out to be a Null Object being used, doing nothing (or returning its defaults) when a NPE would have been indicated the problem much more clearly. So then you'll have to do a \"Null Object check\" instead of a null check, and haven't won anything, actually lost clarity. Nowadays, if I can't avoid null, I just document it clearly and that's it.",
            "votes": 2
          }
        ]
      },
      {
        "content": "If you use (or planning to use) a Java IDE like [JetBrains IntelliJ IDEA][1], [Eclipse][2] or [Netbeans][3] or a tool like findbugs then you can use annotations to solve this problem.\n\nBasically, you've got `@Nullable` and `@NotNull`.\n\nYou can use in method and parameters, like this:\n```java\n@NotNull public static String helloWorld() {\n    return \"Hello World\";\n}\n```\nor\n```java\n@Nullable public static String helloWorld() {\n    return \"Hello World\";\n}\n```\nThe second example won't compile (in IntelliJ IDEA).\n\nWhen you use the first `helloWorld()` function in another piece of code:\n```java\npublic static void main(String[] args)\n{\n    String result = helloWorld();\n    if(result != null) {\n        System.out.println(result);\n    }\n}\n```\nNow the IntelliJ IDEA compiler will tell you that the check is useless, since the `helloWorld()` function won't return `null`, ever.\n\nUsing parameter\n```java\nvoid someMethod(@NotNull someParameter) { }\n```\nif you write something like:\n```java\nsomeMethod(null);\n```\nThis won't compile.\n\nLast example using `@Nullable`\n```java\n@Nullable iWantToDestroyEverything() { return null; }\n```\nDoing this\n```java\niWantToDestroyEverything().something();\n```\nAnd you can be sure that this won't happen. :)\n\nIt's a nice way to let the compiler check something more than it usually does and to enforce your contracts to be stronger. Unfortunately, it's not supported by all the compilers.\n\nIn IntelliJ IDEA 10.5 and on, they added support for any other `@Nullable` `@NotNull` implementations.\n\nSee blog post *[More flexible and configurable @Nullable/@NotNull annotations][4]*.\n\n\n  [1]: https://www.jetbrains.com/idea/\n  [2]: https://www.eclipse.org/\n  [3]: https://netbeans.org/\n  [4]: https://blog.jetbrains.com/idea/2011/03/more-flexible-and-configurable-nullublenotnull-annotations/",
        "votes": 15,
        "accepted": 0,
        "comments": [
          {
            "content": "I find it strangely annoying that the @NotNull & @Nullable interfaces live in the package com.sun.istack.internal. (I guess I associate com.sun with warnings about using a proprietary API.)",
            "votes": 12
          },
          {
            "content": "The good thing about annotations, which @NotNull and @Nullable are is that they nicely degrade when the source code is built by a system that doesn't understand them. So, in effect, the argument that the code is not portable may be invalid - if you use a system that supports and understands these annotations, you get the added benefit of stricter error checking, otherwise you get less of it but your code should still build fine, and the quality of your running program is THE SAME, because these annotations were not enforced at runtime anyway. Besides, all compilers are custom ;-)",
            "votes": 22
          }
        ]
      },
      {
        "content": "## If null-values are not allowed ##\nIf your method is called externally, start with something like this:\n```java\npublic void method(Object object) {\n  if (object == null) {\n    throw new IllegalArgumentException(\"...\");\n  }\n```\nThen, in the rest of that method, you'll know that `object` is not null.\n\nIf it is an internal method (not part of an API), just document that it cannot be null, and that's it.\n\nExample:\n```java\npublic String getFirst3Chars(String text) {\n  return text.subString(0, 3);\n}\n```\nHowever, if your method just passes the value on, and the next method passes it on etc. it could get problematic. In that case you may want to check the argument as above.\n\n## If null is allowed ##\nThis really depends. If find that I often do something like this:\n```java\nif (object == null) {\n  // something\n} else {\n  // something else\n}\n```\nSo I branch, and do two completely different things. There is no ugly code snippet, because I really need to do two different things depending on the data. For example, should I work on the input, or should I calculate a good default value?\n\n----------\n\nIt's actually rare for me to use the idiom \"`if (object != null && ...`\".\n\nIt may be easier to give you examples, if you show examples of where you typically use the idiom.",
        "votes": 37,
        "accepted": 0,
        "comments": [
          {
            "content": "What's the point in throwing IllegalArgumentException? I think NullPointerException would be clearer, and that would also be thrown if you don't do the null-check yourself. I'd either use assert or nothing at all.",
            "votes": 28
          },
          {
            "content": "It's unlikely that every other value than null is acceptable. You could have IllegalArgumentException, OutOfRageException etc etc. Sometimes this makes sense. Other times you end up creating a lot of exception classes that doesn't add any value, then you just use IllegalArgumentException. It doesn't makes sense to have one exception for null-input, and another one for everything else.",
            "votes": 28
          }
        ]
      }
    ]
  },
  {
    "title": "Proper use cases for Android UserManager.isUserAGoat()?",
    "content": "I was looking at the new APIs introduced in [Android 4.2][1].\nWhile looking at the [`UserManager`][2] class I came across the following method:\n> ```java\n> public boolean isUserAGoat()\n> ```\n> Used to determine whether the user making this call is subject to teleportations.\n>\n> Returns whether the user making this call is a goat.\n\nHow and when should this be used?\n\n\n  [1]: http://en.wikipedia.org/wiki/Android_version_history#Android_4.1.2F4.2_Jelly_Bean\n  [2]: http://developer.android.com/reference/android/os/UserManager.html",
    "votes": 36,
    "tags": [
      "android"
    ],
    "comments": [
      {
        "content": "If can be used to avoid some Java warning, as an easter egg, and as a test to see who read the API. And it's a reference to an easter egg in Chrome.",
        "votes": 8
      }
    ],
    "answers": [
      {
        "content": "### Android R Update:\n\nFrom Android R, this method always returns false. Google says that this is done \"to protect goat privacy\":\n```java\n/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n *\n * <p>As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method can\n * now automatically identify goats using advanced goat recognition technology.</p>\n *\n * <p>As of {@link android.os.Build.VERSION_CODES#R}, this method always returns\n * {@code false} in order to protect goat privacy.</p>\n *\n * @return Returns whether the user making this call is a goat.\n */\npublic boolean isUserAGoat() {\n    if (mContext.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.R) {\n        return false;\n    }\n    return mContext.getPackageManager()\n            .isPackageAvailable(\"com.coffeestainstudios.goatsimulator\");\n}\n```\n------\n### Previous answer:\n\nFrom their **[source][1]**, the method used to return `false` until it was changed in API 21.\n```java\n/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n * @return whether the user making this call is a goat \n */\npublic boolean isUserAGoat() {\n    return false;\n}\n```\nIt looks like the method has no real use for us as developers. Someone has previously stated that it might be an **[Easter egg][2]**.\n\n\nIn API 21 the implementation was changed to check if there is an installed app with the package `com.coffeestainstudios.goatsimulator`\n```java\n/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n *\n * <p>As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method can\n * now automatically identify goats using advanced goat recognition technology.</p>\n *\n * @return Returns true if the user making this call is a goat.\n */\npublic boolean isUserAGoat() {\n    return mContext.getPackageManager()\n            .isPackageAvailable(\"com.coffeestainstudios.goatsimulator\");\n}\n```\nHere is the [source][3] and the [change][4].\n\n\n  [1]: https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java#433\n  [2]: http://en.wikipedia.org/wiki/Easter_egg_(media)\n  [3]: https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java#442\n  [4]: https://android.googlesource.com/platform/frameworks/base/+/e4ab16ad98b183afbf7a21ad7314372de41a8b57%5E%21/#F1",
        "votes": 19,
        "accepted": 1,
        "comments": [
          {
            "content": "Theory: Goats are found in all kinds of precarious places, like sheer cliffs, possibly bucking location trends they get from regular non-goat users. Might explain \"teleportations\", which could be goats appearing to wildly relocate as the software tries to determine their location with algos designed for non-goats.",
            "votes": 22
          },
          {
            "content": "This is a history lesson, not an answer. Even if it is an Easter egg, is there a valid use case for it? Being an Easter egg doesn't preclude it from being useful, and you've not shown whether it is or is not useful.",
            "votes": 4
          }
        ]
      },
      {
        "content": "I don't know if this was \"the\" official use case, but the following produces a warning in Java (that can further produce compile errors if mixed with `return` statements, leading to unreachable code):\n```java\nwhile (1 == 2) { // Note that \"if\" is treated differently\n    System.out.println(\"Unreachable code\");\n}\n```\nHowever this is legal:\n```java\nwhile (isUserAGoat()) {\n    System.out.println(\"Unreachable but determined at runtime, not at compile time\");\n}\n```\nSo I often find myself writing a silly utility method for the quickest way to dummy out a code block, then in completing debugging find all calls to it, so provided the implementation doesn't change this can be used for that.\n\n[JLS](http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.21) points out `if (false)` does not trigger \"unreachable code\" for the specific reason that this would break support for debug flags, i.e., basically this use case (h/t @auselen). (`static final boolean DEBUG = false;` for instance).\n\nI replaced `while` for `if`, producing a more obscure use case. I *believe* you can trip up your IDE, like Eclipse, with this behavior, but this edit is 4 years into the future, and I don't have an Eclipse environment to play with.\n\n",
        "votes": 16,
        "accepted": 0,
        "comments": [
          {
            "content": "\"provided the implementation doesn't change\" - and there's the problem. This is a disastrous way to implement a warning-free \"if (false)\" because the implementation can and does change. See my answer to this question: as of API21 isUserAGoat() returns true if a user has a specific app installed. Good luck diagnosing that when your code suddenly starts behaving oddly on \"random\" devices!",
            "votes": 26
          }
        ]
      },
      {
        "content": "There's a funny named method/constant/whatever in each version of Android. \n\nThe only practical use I ever saw was in the Last Call for [Google I/O][1] Contest where they asked what it was for a particular version, to see if contestants read the API diff report for each release. The contest had programming problems too, but generally some trivia that could be graded automatically first to get the number of submissions down to reasonable amounts that would be easier to check.\n\n  [1]: http://en.wikipedia.org/wiki/Google_I/O\n",
        "votes": 19,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "What is the difference between px, dip, dp, and sp?",
    "content": "What is the difference between the units of measure \npx, dip, dp, and sp?",
    "votes": 72,
    "tags": [
      "android"
    ],
    "comments": [],
    "answers": [
      {
        "content": "Pretty much everything about this and how to achieve the best support for multiple screens of different sizes and densities is very well documented here:\n\n  - [Supporting Multiple Screens][1]\n\n> **Screen size**  \n> Actual physical size, measured as the screen's diagonal.\n> For simplicity, Android groups all actual screen sizes into four\n> generalized sizes: small, normal, large, and extra-large.\n> \n> **Screen density**  \n> The number of pixels within a physical area of the\n> screen; usually referred to as dpi (dots per inch). For example, a\n> \"low\" density screen has fewer pixels within a given physical area,\n> compared to a \"normal\" or \"high\" density screen. For simplicity,\n> Android groups all actual screen densities into six generalized\n> densities: low, medium, high, extra-high, extra-extra-high, and\n> extra-extra-extra-high.\n> \n> **Orientation**  \n> The orientation of the screen from the user's point of\n> view. This is either landscape or portrait, meaning that the screen's\n> aspect ratio is either wide or tall, respectively. Be aware that not\n> only do different devices operate in different orientations by\n> default, but the orientation can change at runtime when the user\n> rotates the device. \n\n> **Resolution**  \n> The total number of physical pixels on\n> a screen. When adding support for multiple screens, applications do\n> not work directly with resolution; applications should be concerned\n> only with screen size and density, as specified by the generalized\n> size and density groups. \n\n> **Density-independent pixel (dp)**  \n> A virtual\n> pixel unit that you should use when defining UI layout, to express\n> layout dimensions or position in a density-independent way. \n> The density-independent pixel is equivalent to one physical pixel on a 160\n> dpi screen, which is the baseline density assumed by the system for a\n> \"medium\" density screen. At runtime, the system transparently handles\n> any scaling of the dp units, as necessary, based on the actual density\n> of the screen in use. The conversion of dp units to screen pixels is\n> simple: \n> `px = dp * (dpi / 160)`. \n> For example, on a 240 dpi screen, 1 dp\n> equals 1.5 physical pixels. You should always use dp units when\n> defining your application's UI, to ensure proper display of your UI on\n> screens with different densities.\n\n\nIf you are at all serious about developing an Android app for more than one type of device, you should have read the screens support development document at least once. In addition to that, it is always a good thing to know the actual number of active devices that have a particular screen configuration.\n\n - [Screen Sizes and Densities][2]\n\n[1]: http://developer.android.com/guide/practices/screens_support.html\n[2]: http://developer.android.com/resources/dashboard/screens.html\n",
        "votes": 56,
        "accepted": 1,
        "comments": []
      },
      {
        "content": "I will elaborate more on how exactly does dp convert to px:\n\n - If running on an mdpi device, a `150 x 150 px` image will take up `150 * 150 dp` of screen space.\n - If running on an hdpi device, a `150 x 150 px` image will take up `100 * 100 dp` of screen space.\n - If running on an xhdpi device, a `150x150 px` image will take up `75 * 75 dp` of screen space.\n\nThe other way around: say, you want to add an image to your application and you need it to fill a `100 * 100 dp` control. You'll need to create different size images for supported screen sizes:\n\n - `100 * 100 px` image for mdpi\n - `150 * 150 px` image for hdpi\n - `200 * 200 px` image for xhdpi\n",
        "votes": 35,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "How to close/hide the Android soft keyboard programmatically?",
    "content": "I have an `EditText` and a `Button` in my layout.\n\nAfter writing in the edit field and clicking on the `Button`, I want to hide the virtual keyboard when touching it outside the keyboard. I assume that this is a simple piece of code, but where can I find an example of it?",
    "votes": 78,
    "tags": [
      "android"
    ],
    "comments": [],
    "answers": [
      {
        "content": "You can force Android to hide the virtual keyboard using the [InputMethodManager][1], calling [`hideSoftInputFromWindow`][2], passing in the token of the window containing your focused view.\n\n```java\n// Check if no view has focus:\nView view = this.getCurrentFocus();\nif (view != null) {  \n    InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);\n    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}\n```\n\nThis will force the keyboard to be hidden in all situations. In some cases, you will want to pass in `InputMethodManager.HIDE_IMPLICIT_ONLY` as the second parameter to ensure you only hide the keyboard when the user didn't explicitly force it to appear (by holding down the menu).\n\n**Note:** If you want to do this in Kotlin, use:\n`context?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager`\n\n\n\n\n**Kotlin Syntax**\n\n \n```kotlin\n// Only runs if there is a view that is currently focused\nthis.currentFocus?.let { view ->\n    val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as? InputMethodManager\n    imm?.hideSoftInputFromWindow(view.windowToken, 0)\n}\n```\n\n  [1]: http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html\n  [2]: http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow%28android.os.IBinder,%20int%29\n",
        "votes": 27,
        "accepted": 1,
        "comments": []
      },
      {
        "content": "To help clarify this madness, I'd like to begin by apologizing on behalf of all Android users for Google's downright ridiculous treatment of the soft keyboard. The reason there are so many answers, each different, for the same simple question is that this API, like many others in Android, is horribly designed. I can think of no polite way to state it.\n\nI want to hide the keyboard.  I expect to provide Android with the following statement: `Keyboard.hide()`. The end. Thank you very much.  But Android has a problem.  You must use the `InputMethodManager` to hide the keyboard. OK, fine, this is Android's API to the keyboard. BUT! You are required to have a `Context` in order to get access to the IMM. Now we have a problem.  I may want to hide the keyboard from a static or utility class that has no use or need for any `Context`. or And FAR worse, the IMM requires that you specify what `View` (or even worse, what `Window`) you want to hide the keyboard FROM.\n\nThis is what makes hiding the keyboard so challenging. Dear Google: When I'm looking up the recipe for a cake, there is no `RecipeProvider` on Earth that would refuse to provide me with the recipe unless I first answer WHO the cake will be eaten by AND where it will be eaten!! \n\nThis sad story ends with the ugly truth: to hide the Android keyboard, you will be required to provide 2 forms of identification: a `Context` and either a `View` or a `Window`.\n\nI have created a static utility method that can do the job VERY solidly, provided you call it from an `Activity`.\n```java\npublic static void hideKeyboard(Activity activity) {\n\tInputMethodManager imm = (InputMethodManager) activity.getSystemService(Activity.INPUT_METHOD_SERVICE);\n\t//Find the currently focused view, so we can grab the correct window token from it.\n\tView view = activity.getCurrentFocus();\n\t//If no view currently has focus, create a new one, just so we can grab a window token from it\n\tif (view == null) {\n\t\tview = new View(activity);\n\t}\n\timm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}\n```\n\nBe aware that this utility method ONLY works when called from an `Activity`! The above method calls `getCurrentFocus` of the target `Activity` to fetch the proper window token. \n\nBut suppose you want to hide the keyboard from an `EditText` hosted in a `DialogFragment`? You can't use the method above for that:\n```java\nhideKeyboard(getActivity()); //won't work\n```\nThis won't work because you'll be passing a reference to the `Fragment`'s host `Activity`, which will have no focused control while the `Fragment` is shown! Wow! So, for hiding the keyboard from fragments, I resort to the lower-level, more common, and uglier:\n```java\npublic static void hideKeyboardFrom(Context context, View view) {\n    InputMethodManager imm = (InputMethodManager) context.getSystemService(Activity.INPUT_METHOD_SERVICE);\n    imm.hideSoftInputFromWindow(view.getWindowToken(), 0);\n}\n```\nBelow is some additional information gleaned from more time wasted chasing this solution:\n\n**About windowSoftInputMode**\n\nThere's yet another point of contention to be aware of. By default, Android will automatically assign initial focus to the first `EditText` or focusable control in your `Activity`.  It naturally follows that the InputMethod (typically the soft keyboard) will respond to the focus event by showing itself. The `windowSoftInputMode` attribute in `AndroidManifest.xml`, when set to `stateAlwaysHidden`, instructs the keyboard to ignore this automatically-assigned initial focus. \n```xml\n<activity\n    android:name=\".MyActivity\"\n    android:windowSoftInputMode=\"stateAlwaysHidden\"/>\n```\nAlmost unbelievably, it appears to do nothing to prevent the keyboard from opening when you touch the control (unless `focusable=\"false\"` and/or `focusableInTouchMode=\"false\"` are assigned to the control). Apparently, the windowSoftInputMode setting applies only to automatic focus events, not to focus events triggered by touch events.\n\nTherefore, `stateAlwaysHidden` is VERY poorly named indeed. It should perhaps be called `ignoreInitialFocus` instead. \n\n-------------------------------------------------\n**UPDATE: More ways to get a window token**\n\nIf there is no focused view (e.g. can happen if you just changed fragments), there are other views that will supply a useful window token.\n\nThese are alternatives for the above code `if (view == null)   view = new View(activity);`  These don't refer explicitly to your activity.\n\nInside a fragment class:\n```java\nview = getView().getRootView().getWindowToken();\n```\nGiven a fragment `fragment` as a parameter:\n```java\nview = fragment.getView().getRootView().getWindowToken();\n```\nStarting from your content body:\n```java\nview = findViewById(android.R.id.content).getRootView().getWindowToken();\n```\n\n-------------------------------------------------\n**UPDATE 2: Clear focus to avoid showing keyboard again if you open the app from the background**\n\nAdd this line to the end of the method:\n```java\nview.clearFocus();\n```",
        "votes": 53,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "Also useful for hiding the soft-keyboard is:\n```java\ngetWindow().setSoftInputMode(\n    WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN\n);\n```\nis can be used to suppress the soft-keyboard until the user actually touches the editText View.",
        "votes": 43,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "How can I remove a specific item from an array?",
    "content": "How do I remove a specific value from an array? Something like:\n\n```javascript\narray.remove(value);  // removes all elements with value\n```\n\nI have to use *core* JavaScript. Frameworks are not allowed.\n",
    "votes": 46,
    "tags": [
      "javascript"
    ],
    "comments": [
      {
        "content": "array.remove(index) or array.pull(index) would make a lot of sense. splice is very useful, but a remove() or pull() method would be welcome... Search the internet, you will find a lot of \"What is the opposite of push() in JavaScript?\" questions. Would be great if the answare could be as simples as plain english: Pull!",
        "votes": 7
      },
      {
        "content": "array.filter((_, index) => index != number);",
        "votes": 2
      }
    ],
    "answers": [
      {
        "content": "Find the `index` of the array element you want to remove using [`indexOf`][2], and then remove that index with [`splice`][1].\n\n> The splice() method changes the contents of an array by removing\n> existing elements and/or adding new elements.\n\n```javascript\nconst array = [2, 5, 9];\n\nconsole.log(array);\n\nconst index = array.indexOf(5);\nif (index > -1) { // only splice array when item is found\n  array.splice(index, 1); // 2nd parameter means remove one item only\n}\n\n// array = [2, 9]\nconsole.log(array); \n```\n\nThe second parameter of `splice` is the number of elements to remove. Note that `splice` modifies the array in place and returns a new array containing the elements that have been removed.\n___\nFor the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of `5` from `[2,5,9,1,5,8,5]`), while the second function removes all occurrences:\n\n```javascript\nfunction removeItemOnce(arr, value) {\n  var index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n  }\n  return arr;\n}\n\nfunction removeItemAll(arr, value) {\n  var i = 0;\n  while (i < arr.length) {\n    if (arr[i] === value) {\n      arr.splice(i, 1);\n    } else {\n      ++i;\n    }\n  }\n  return arr;\n}\n// Usage\nconsole.log(removeItemOnce([2,5,9,1,5,8,5], 5))\nconsole.log(removeItemAll([2,5,9,1,5,8,5], 5))\n```\n\nIn TypeScript, these functions can stay type-safe with a type parameter:\n\n```typescript\nfunction removeItem<T>(arr: Array<T>, value: T): Array<T> { \n  const index = arr.indexOf(value);\n  if (index > -1) {\n    arr.splice(index, 1);\n  }\n  return arr;\n}\n```\n\n  [1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n  [2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n",
        "votes": 39,
        "accepted": 1,
        "comments": [
          {
            "content": "Serious question: why doesn't JavaScript allow the simple and intuitive method of removing an element at an index? A simple, elegant, myArray.remove(index); seems to be the best solution and is implemented in many other languages (a lot of them older than JavaScript.)",
            "votes": 19
          },
          {
            "content": "\nYou can simplify this solution by counting down instead of up: for ( var i = ary.length - 1; i >= 0; i-- ) { if ( ary[i] === value ) { ary.remove(i)} }",
            "votes": 7
          }
        ]
      },
      {
        "content": "**Edited on 2016 October**\n\n\n- Do it simple, intuitive and explicit ([Occam's razor][1])\n- Do it immutable (original array stays unchanged)\n- Do it with standard JavaScript functions, if your browser doesn't support them - **use polyfill**\n\nIn this code example I use **`array.filter(...)`** function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider [**polyfilling with `core-js`**][2].\n\nRemoving item (ECMA-262 Edition 5 code AKA old style JavaScript)\n-\n```javascript\nvar value = 3\n\nvar arr = [1, 2, 3, 4, 5, 3]\n\narr = arr.filter(function(item) {\n    return item !== value\n})\n\nconsole.log(arr)\n// [ 1, 2, 4, 5 ]\n```\nRemoving item (ECMAScript 6 code)\n-\n```javascript\nlet value = 3\n\nlet arr = [1, 2, 3, 4, 5, 3]\n\narr = arr.filter(item => item !== value)\n\nconsole.log(arr)\n// [ 1, 2, 4, 5 ]\n```\n**IMPORTANT** ECMAScript 6 `() => {}` arrow function syntax is not supported in Internet Explorer at all, Chrome before version 45, Firefox before version 22, and Safari before version 10. To use ECMAScript 6 syntax in old browsers you can use [BabelJS][3].\n\n---\n\nRemoving multiple items (ECMAScript&nbsp;7 code)\n-\n\nAn additional advantage of this method is that you can remove multiple items\n```javascript\nlet forDeletion = [2, 3, 5]\n\nlet arr = [1, 2, 3, 4, 5, 3]\n\narr = arr.filter(item => !forDeletion.includes(item))\n// !!! Read below about array.includes(...) support !!!\n\nconsole.log(arr)\n// [ 1, 4 ]\n```\n**IMPORTANT** `array.includes(...)` function is not supported in Internet Explorer at all, Chrome before version 47, Firefox before version 43, Safari before version 9, and Edge before version 14 but you can [**polyfill with `core-js`**][2].\n\nRemoving multiple items (in the future, maybe)\n-\n\nIf the [\"This-Binding Syntax\"][4] proposal is ever accepted, you'll be able to do this:\n```javascript\n// array-lib.js\n\nexport function remove(...forDeletion) {\n    return this.filter(item => !forDeletion.includes(item))\n}\n\n// main.js\n\nimport { remove } from './array-lib.js'\n\nlet arr = [1, 2, 3, 4, 5, 3]\n\n// :: This-Binding Syntax Proposal\n// using \"remove\" function as \"virtual method\"\n// without extending Array.prototype\narr = arr::remove(2, 3, 5)\n\nconsole.log(arr)\n// [ 1, 4 ]\n```\n[**Try it yourself in BabelJS :)**][5]\n\n**Reference**\n\n - [Array.prototype.includes][6]\n - [Functional composition][7]\n\n\n  [1]: https://en.wikipedia.org/wiki/Occam%27s_razor\n  [2]: https://github.com/zloirock/core-js#ecmascript-array\n  [3]: https://babeljs.io/\n  [4]: https://github.com/tc39/proposal-bind-operator\n  [5]: https://babeljs.io/repl/#?browsers=chrome%20%3E%2050&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=AQ4MwVwOwYwFwJYHsrAE4FMC2SBuGAKAOhLCTQBEMAbDRFASmAG8AoUD9OiNVOACwQBnImATU4GNAQSSswALwA-YAEIylGnWRQiCWNQgATDEJlyGDdqAC-rayFpxgAQzRpFwANoBGADTAAEwBAMwBACwBAKyhALr2HAD0icAAXKnAACqCQgC0AEL6RvoA5sAAygCeUHAuAB7AAApoSAAOSEIu1A7AycAQQqVcOPjg0PA6rkLAAES4CGhwEF3AWHT8SEYzPW4eCq7u6ZgjhMHAYcBRVj0wKEJItETUSCUEu1ZJKV7A_sDhwLEgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=true&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=es2015%2Creact%2Cstage-0%2Cstage-2&prettier=false&targets=&version=7.17.9&externalPlugins=&assumptions=%7B%7D\n  [6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\n  [7]: https://vanslaars.io/articles/create-pipe-function\n\n",
        "votes": 27,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "I don't know how you are expecting `array.remove(int)` to behave. There are three possibilities I can think of that you might want.\n\nTo remove an element of an array at an index `i`:\n\n```javascript\narray.splice(i, 1);\n```\n\nIf you want to remove every element with value `number` from the array:\n\n```javascript\nfor (var i = array.length - 1; i >= 0; i--) {\n if (array[i] === number) {\n  array.splice(i, 1);\n }\n}\n```\n\nIf you just want to make the element at index `i` no longer exist, but you don't want the indexes of the other elements to change:\n\n```javascript\ndelete array[i];\n```\n",
        "votes": 19,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "It depends on whether you want to keep an empty spot or not.\n\nIf you **do** want an empty slot:\n```javascript\narray[index] = undefined;\n```\nIf you **don't** want an empty slot:\n```javascript\n//To keep the original:\n//oldArray = [...array];\n\n//This modifies the array.\narray.splice(index, 1);\n```\nAnd if you need the value of that item, you can just store the returned array's element:\n```javascript\nvar value = array.splice(index, 1)[0];\n```\nIf you want to remove at either end of the array, you can use `array.pop()` for the last one or `array.shift()` for the first one (both return the value of the item as well).\n\nIf you don't know the index of the item, you can use `array.indexOf(item)` to get it (in a `if()` to get one item or in a `while()` to get all of them). `array.indexOf(item)` returns either the index or `-1` if not found.&nbsp;\n\n  [1]: https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\n",
        "votes": 8,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "var functionName = function() {} vs function functionName() {}",
    "content": "I've recently started maintaining someone else's JavaScript code. I'm fixing bugs, adding features and also trying to tidy up the code and make it more consistent.\n\nThe previous developer used two ways of declaring functions and I can't work out if there is a reason behind it or not.\n\nThe two ways are:\n```javascript\nvar functionOne = function() {\n    // Some code\n};\n```\n```javascript\nfunction functionTwo() {\n    // Some code\n}\n```\nWhat are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can't be done with the other?\n",
    "votes": 42,
    "tags": [
      "javascript"
    ],
    "comments": [],
    "answers": [
      {
        "content": "The difference is that `functionOne` is a function expression and so only defined when that line is reached, whereas `functionTwo` is a function declaration and is defined as soon as its surrounding function or script is executed (due to [hoisting][1]).  \n\nFor example, a function expression:\n\n```javascript\n// TypeError: functionOne is not a function\nfunctionOne();\n\nvar functionOne = function() {\n  console.log(\"Hello!\");\n};\n```\n\nAnd, a function declaration:   \n```javascript\n// Outputs: \"Hello!\"\nfunctionTwo();\n\nfunction functionTwo() {\n  console.log(\"Hello!\");\n}\n```\n\nHistorically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.\n\n```javascript\n'use strict';    \n{ // note this block!\n  function functionThree() {\n    console.log(\"Hello!\");\n  }\n}\nfunctionThree(); // ReferenceError\n```\n\n  [1]: http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html",
        "votes": 34,
        "accepted": 1,
        "comments": [
          {
            "content": "The sentence \"due to hoisting\" might give a wrong impression that only the named function gets hoisted. In fact, both var functionOne as well as function functionTwo get hoisted to some degree - it's just that functionOne is set to undefined (you could call it half-hoisting, variables always get hoisted only to that degree) whereas function functionTwo is fully hoisted in that it's defined and declared. Invoking something that's undefined will of course then throw a typeError.",
            "votes": 19
          }
        ]
      },
      {
        "content": "First I want to correct Greg: `function abc(){}` is scoped too &mdash; the name `abc` is defined in the scope where this definition is encountered. Example:\n```javascript\nfunction xyz(){\n  function abc(){};\n  // abc is defined here...\n}\n// ...but not here\n```\nSecondly, it is possible to combine both styles:\n```javascript\nvar xyz = function abc(){};\n```\n`xyz` is going to be defined as usual, `abc` is undefined in all browsers but Internet&nbsp;Explorer &mdash; do not rely on it being defined. But it will be defined inside its body:\n```javascript\nvar xyz = function abc(){\n  // xyz is visible here\n  // abc is visible here\n}\n// xyz is visible here\n// abc is undefined here\n```\nIf you want to alias functions on all browsers, use this kind of declaration:\n```javascript\nfunction abc(){};\nvar xyz = abc;\n```\nIn this case, both `xyz` and `abc` are aliases of the same object:\n```javascript\nconsole.log(xyz === abc); // prints \"true\"\n```\nOne compelling reason to use the combined style is the \"name\" attribute of function objects (**not supported by Internet&nbsp;Explorer**). Basically when you define a function like\n```javascript\nfunction abc(){};\nconsole.log(abc.name); // prints \"abc\"\n```\nits name is automatically assigned. But when you define it like\n```javascript\nvar abc = function(){};\nconsole.log(abc.name); // prints \"\"\n```\nits name is empty &mdash; we created an anonymous function and assigned it to some variable.\n\nAnother good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:\n```javascript\n// Assume really.long.external.scoped is {}\nreally.long.external.scoped.name = function shortcut(n){\n  // Let it call itself recursively:\n  shortcut(n - 1);\n  // ...\n  // Let it pass itself as a callback:\n  someFunction(shortcut);\n  // ...\n}\n```\nIn the example above we can do the same with an external name, but it'll be too unwieldy (and slower).\n\n*(Another way to refer to itself is to use ``arguments.callee``, which is still relatively long, and not supported in the strict mode.)*\n\nDeep down, JavaScript treats both statements differently. This is a function declaration:\n```javascript\nfunction abc(){}\n```\n`abc` here is defined everywhere in the current scope:\n```javascript\n// We can call it here\nabc(); // Works\n\n// Yet, it is defined down there.\nfunction abc(){}\n\n// We can call it again\nabc(); // Works\n```\nAlso, it hoisted through a `return` statement:\n```javascript\n// We can call it here\nabc(); // Works\nreturn;\nfunction abc(){}\n```\nThis is a function expression:\n```javascript\nvar xyz = function(){};\n```\n`xyz` here is defined from the point of assignment:\n```javascript\n// We can't call it here\nxyz(); // UNDEFINED!!!\n\n// Now it is defined\nxyz = function(){}\n\n// We can call it here\nxyz(); // works\n```\nFunction declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.\n\nFun fact:\n```javascript\nvar xyz = function abc(){};\nconsole.log(xyz.name); // Prints \"abc\"\n```\nPersonally, I prefer the \"function expression\" declaration because this way I can control the visibility. When I define the function like\n```javascript\nvar abc = function(){};\n```\nI know that I defined the function locally. When I define the function like\n```javascript\nabc = function(){};\n```\nI know that I defined it globally providing that I didn't define `abc` anywhere in the chain of scopes. This style of definition is resilient even when used inside `eval()`. While the definition\n```javascript\nfunction abc(){};\n```\ndepends on the context and may leave you guessing where it is actually defined, especially in the case of `eval()` &mdash; the answer is: It depends on the browser.\n",
        "votes": 22,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "What does the \"yield\" keyword do?",
    "content": "What is the use of the `yield` keyword in Python? What does it do?\n\nFor example, I'm trying to understand this code:\n```python\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n    if self._leftchild and distance - max_dist < self._median:\n        yield self._leftchild\n    if self._rightchild and distance + max_dist >= self._median:\n        yield self._rightchild\t\n```\nAnd this is the caller:\n```python\nresult, candidates = [], [self]\nwhile candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    if distance <= max_dist and distance >= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\nreturn result\n```\nWhat happens when the method `_get_child_candidates` is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?",
    "votes": 57,
    "tags": [
      "python"
    ],
    "comments": [],
    "answers": [
      {
        "content": "To understand what `yield` does, you must understand what *generators* are. And before you can understand generators, you must understand *iterables*.\n\nIterables\n---------\n\nWhen you create a list, you can read its items one by one. Reading its items one by one is called iteration:\n```python\n>>> mylist = [1, 2, 3]\n>>> for i in mylist:\n...    print(i)\n1\n2\n3\n```\n`mylist` is an *iterable*. When you use a list comprehension, you create a list, and so an iterable:\n```python\n>>> mylist = [x*x for x in range(3)]\n>>> for i in mylist:\n...    print(i)\n0\n1\n4\n```\nEverything you can use \"`for... in...`\" on is an iterable; `lists`, `strings`, files...\n\nThese iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.\n\nGenerators\n----------\n\nGenerators are iterators, a kind of iterable **you can only iterate over once**. Generators do not store all the values in memory, **they generate the values on the fly**:\n```python\n>>> mygenerator = (x*x for x in range(3))\n>>> for i in mygenerator:\n...    print(i)\n0\n1\n4\n```\nIt is just the same except you used `()` instead of `[]`. BUT, you **cannot** perform `for i in mygenerator` a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.\n\nYield\n-----\n\n`yield` is a keyword that is used like `return`, except the function will return a generator.\n```python\n>>> def create_generator():\n...    mylist = range(3)\n...    for i in mylist:\n...        yield i*i\n...\n>>> mygenerator = create_generator() # create a generator\n>>> print(mygenerator) # mygenerator is an object!\n<generator object create_generator at 0xb7555c34>\n>>> for i in mygenerator:\n...     print(i)\n0\n1\n4\n```\nHere it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.\n\nTo master `yield`, you must understand that **when you call the function, the code you have written in the function body does not run.** The function only returns the generator object, this is a bit tricky.\n\nThen, your code will continue from where it left off each time `for` uses the generator.\n\nNow the hard part:\n\nThe first time the `for` calls the generator object created from your function, it will run the code in your function from the beginning until it hits `yield`, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting `yield`. That can be because the loop has come to an end, or because you no longer satisfy an `\"if/else\"`.\n\n---\n\nYour code explained\n-------------------\n\n*Generator:*\n```python\n# Here you create the method of the node object that will return the generator\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n    # Here is the code that will be called each time you use the generator object:\n\n    # If there is still a child of the node object on its left\n    # AND if the distance is ok, return the next child\n    if self._leftchild and distance - max_dist < self._median:\n        yield self._leftchild\n\n    # If there is still a child of the node object on its right\n    # AND if the distance is ok, return the next child\n    if self._rightchild and distance + max_dist >= self._median:\n        yield self._rightchild\n\n    # If the function arrives here, the generator will be considered empty\n    # there are no more than two values: the left and the right children\n```\n*Caller:*\n```python\n# Create an empty list and a list with the current object reference\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\nwhile candidates:\n\n    # Get the last candidate and remove it from the list\n    node = candidates.pop()\n\n    # Get the distance between obj and the candidate\n    distance = node._get_dist(obj)\n\n    # If the distance is ok, then you can fill in the result\n    if distance <= max_dist and distance >= min_dist:\n        result.extend(node._values)\n\n    # Add the children of the candidate to the candidate's list\n    # so the loop will keep running until it has looked\n    # at all the children of the children of the children, etc. of the candidate\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n```\nThis code contains several smart parts:\n\n- The loop iterates on a list, but the list expands while the loop is being iterated. It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, `candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))` exhausts all the values of the generator, but `while` keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.\n\n- The `extend()` method is a list object method that expects an iterable and adds its values to the list.\n\nUsually, we pass a list to it:\n```python\n>>> a = [1, 2]\n>>> b = [3, 4]\n>>> a.extend(b)\n>>> print(a)\n[1, 2, 3, 4]\n```\nBut in your code, it gets a generator, which is good because:\n\n1. You don't need to read the values twice.\n2. You may have a lot of children and you don't want them all stored in memory.\n\nAnd it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...\n\nYou can stop here, or read a little bit to see an advanced use of a generator:\n\nControlling a generator exhaustion\n------\n```python\n>>> class Bank(): # Let's create a bank, building ATMs\n...    crisis = False\n...    def create_atm(self):\n...        while not self.crisis:\n...            yield \"$100\"\n>>> hsbc = Bank() # When everything's ok the ATM gives you as much as you want\n>>> corner_street_atm = hsbc.create_atm()\n>>> print(corner_street_atm.next())\n$100\n>>> print(corner_street_atm.next())\n$100\n>>> print([corner_street_atm.next() for cash in range(5)])\n['$100', '$100', '$100', '$100', '$100']\n>>> hsbc.crisis = True # Crisis is coming, no more money!\n>>> print(corner_street_atm.next())\n<type 'exceptions.StopIteration'>\n>>> wall_street_atm = hsbc.create_atm() # It's even true for new ATMs\n>>> print(wall_street_atm.next())\n<type 'exceptions.StopIteration'>\n>>> hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty\n>>> print(corner_street_atm.next())\n<type 'exceptions.StopIteration'>\n>>> brand_new_atm = hsbc.create_atm() # Build a new one to get back in business\n>>> for cash in brand_new_atm:\n...    print cash\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n$100\n...\n```\n**Note:** For Python 3, use`print(corner_street_atm.__next__())` or `print(next(corner_street_atm))`\n\nIt can be useful for various things like controlling access to a resource.\n\nItertools, your best friend\n-----\n\nThe itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one-liner? `Map / Zip` without creating another list?\n\nThen just `import itertools`.\n\nAn example? Let's see the possible orders of arrival for a four-horse race:\n```python\n>>> horses = [1, 2, 3, 4]\n>>> races = itertools.permutations(horses)\n>>> print(races)\n<itertools.permutations object at 0xb754f1dc>\n>>> print(list(itertools.permutations(horses)))\n[(1, 2, 3, 4),\n (1, 2, 4, 3),\n (1, 3, 2, 4),\n (1, 3, 4, 2),\n (1, 4, 2, 3),\n (1, 4, 3, 2),\n (2, 1, 3, 4),\n (2, 1, 4, 3),\n (2, 3, 1, 4),\n (2, 3, 4, 1),\n (2, 4, 1, 3),\n (2, 4, 3, 1),\n (3, 1, 2, 4),\n (3, 1, 4, 2),\n (3, 2, 1, 4),\n (3, 2, 4, 1),\n (3, 4, 1, 2),\n (3, 4, 2, 1),\n (4, 1, 2, 3),\n (4, 1, 3, 2),\n (4, 2, 1, 3),\n (4, 2, 3, 1),\n (4, 3, 1, 2),\n (4, 3, 2, 1)]\n```\n\nUnderstanding the inner mechanisms of iteration\n------\n\nIteration is a process implying iterables (implementing the `__iter__()` method) and iterators (implementing the `__next__()` method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.\n\nThere is more about it in this article about [how `for` loops work][1].\n\n  [1]: https://web.archive.org/web/20201109034340/http://effbot.org/zone/python-for-statement.htm\n",
        "votes": 35,
        "accepted": 1,
        "comments": [
          {
            "content": "yield is not as magical this answer suggests. When you call a function that contains a yield statement anywhere, you get a generator object, but no code runs. Then each time you extract an object from the generator, Python executes code in the function until it comes to a yield statement, then pauses and delivers the object. When you extract another object, Python resumes just after the yield and continues until it reaches another yield (often the same one, but one iteration later). This continues until the function runs off the end, at which point the generator is deemed exhausted.",
            "votes": 33
          },
          {
            "content": "\"These iterables are handy... but you store all the values in memory and this is not always what you want\", is either wrong or confusing. An iterable returns an iterator upon calling the iter() on the iterable, and an iterator doesn't always have to store its values in memory, depending on the implementation of the iter method, it can also generate values in the sequence on demand.",
            "votes": 12
          }
        ]
      },
      {
        "content": "## Shortcut to understanding `yield` ##\n\nWhen you see a function with `yield` statements, apply this easy trick to understand what will happen:\n\n 1. Insert a line `result = []` at the start of the function.\n 2. Replace each `yield expr` with `result.append(expr)`.\n 3. Insert a line `return result` at the bottom of the function.\n 4. Yay - no more `yield` statements! Read and figure out the code.\n 5. Compare function to the original definition.\n\nThis trick may give you an idea of the logic behind the function, but what actually happens with `yield` is significantly different than what happens in the list-based approach. In many cases, the yield approach will be a lot more memory efficient and faster too. In other cases, this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...\n\n## Don't confuse your Iterables, Iterators, and Generators\n\nFirst, the **iterator protocol** - when you write\n```python\nfor x in mylist:\n    ...loop body...\n```\nPython performs the following two steps:\n\n1. Gets an iterator for `mylist`:\n   \n   Call `iter(mylist)` -> this returns an object with a `next()` method (or `__next__()` in Python 3).\n\n   [This is the step most people forget to tell you about]\n\n2. Uses the iterator to loop over items:\n\n   Keep calling the `next()` method on the iterator returned from step 1. The return value from `next()` is assigned to `x` and the loop body is executed. If an exception `StopIteration` is raised from within `next()`, it means there are no more values in the iterator and the loop is exited.\n\nThe truth is Python performs the above two steps anytime it wants to *loop over* the contents of an object - so it could be a for loop, but it could also be code like `otherlist.extend(mylist)` (where `otherlist` is a Python list).\n\nHere `mylist` is an *iterable* because it implements the iterator protocol. In a user-defined class, you can implement the `__iter__()` method to make instances of your class iterable. This method should return an *iterator*. An iterator is an object with a `next()` method. It is possible to implement both `__iter__()` and `next()` on the same class, and have `__iter__()` return `self`. This will work for simple cases, but not when you want two iterators looping over the same object at the same time.\n\nSo that's the iterator protocol, many objects implement this protocol:\n\n 1. Built-in lists, dictionaries, tuples, sets, and files.\n 2. User-defined classes that implement `__iter__()`.\n 3. Generators.\n\nNote that a `for` loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls `next()`. Built-in lists return their items one by one, dictionaries return the *keys* one by one, files return the *lines* one by one, etc. And generators return... well that's where `yield` comes in:\n```python\ndef f123():\n    yield 1\n    yield 2\n    yield 3\n\nfor item in f123():\n    print item\n```\nInstead of `yield` statements, if you had three `return` statements in `f123()` only the first would get executed, and the function would exit. But `f123()` is no ordinary function. When `f123()` is called, it *does not* return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the `for` loop tries to loop over the generator object, the function resumes from its suspended state at the very next line after the `yield` it previously returned from, executes the next line of code, in this case, a `yield` statement, and returns that as the next item. This happens until the function exits, at which point the generator raises `StopIteration`, and the loop exits. \n\nSo the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing `__iter__()` and `next()` methods to keep the `for` loop happy. At the other end, however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.\n\n## Why Use Generators? ##\n\nUsually, you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class SomethingIter that keeps the state in instance members and performs the next logical step in its `next()` (or `__next__()` in Python 3) method. Depending on the logic, the code inside the `next()` method may end up looking very complex and prone to bugs. Here generators provide a clean and easy solution.",
        "votes": 23,
        "accepted": 0,
        "comments": []
      },
      {
        "content": "Think of it this way:\n\nAn iterator is just a fancy sounding term for an object that has a `next()` method.  So a yield-ed function ends up being something like this:\n\nOriginal version:\n```python\ndef some_function():\n    for i in xrange(4):\n        yield i\n\nfor i in some_function():\n    print i\n```\nThis is basically what the Python interpreter does with the above code:\n```python\nclass it:\n    def __init__(self):\n        # Start at -1 so that we get 0 when we add 1 below.\n        self.count = -1\n\n    # The __iter__ method will be called once by the 'for' loop.\n    # The rest of the magic happens on the object returned by this method.\n    # In this case it is the object itself.\n    def __iter__(self):\n        return self\n\n    # The next method will be called repeatedly by the 'for' loop\n    # until it raises StopIteration.\n    def next(self):\n        self.count += 1\n        if self.count < 4:\n            return self.count\n        else:\n            # A StopIteration exception is raised\n            # to signal that the iterator is done.\n            # This is caught implicitly by the 'for' loop.\n            raise StopIteration\n\ndef some_func():\n    return it()\n\nfor i in some_func():\n    print i\n```\nFor more insight as to what's happening behind the scenes, the `for` loop can be rewritten to this:\n```python\niterator = some_func()\ntry:\n    while 1:\n        print iterator.next()\nexcept StopIteration:\n    pass\n```\nDoes that make more sense or just confuse you more?  :)\n\nI should note that this *is* an oversimplification for illustrative purposes. :)\n",
        "votes": 11,
        "accepted": 0,
        "comments": []
      }
    ]
  },
  {
    "title": "Does Python have a ternary conditional operator?",
    "content": "Is there a [ternary conditional operator][1] in Python?\n\n  [1]: https://en.wikipedia.org/wiki/%3F:#Python\n",
    "votes": 74,
    "tags": [
      "python"
    ],
    "comments": [],
    "answers": [
      {
        "content": "Yes, it was [added][1] in version 2.5. The expression syntax is:\n```python\na if condition else b\n```\nFirst `condition` is evaluated, then exactly one of either `a` or `b` is evaluated and returned based on the [Boolean][2] value of `condition`. If `condition` evaluates to `True`, then `a` is evaluated and returned but `b` is ignored, or else when `b` is evaluated and returned but `a` is ignored.\n\nThis allows short-circuiting because when `condition` is true only `a` is evaluated and `b` is not evaluated at all, but when `condition` is false only `b` is evaluated and `a` is not evaluated at all.\n\nFor example:\n```python\n>>> 'true' if True else 'false'\n'true'\n>>> 'true' if False else 'false'\n'false'\n```\nNote that conditionals are an _expression_, not a _statement_. This means you can't use **statements** such as `pass`, or assignments with `=` (or \"augmented\" assignments like `+=`), within a conditional **expression**:\n```python\n>>> pass if False else pass\n  File \"<stdin>\", line 1\n    pass if False else pass\n         ^\nSyntaxError: invalid syntax\n\n>>> # Python parses this as `x = (1 if False else y) = 2`\n>>> # The `(1 if False else x)` part is actually valid, but\n>>> # it can't be on the left-hand side of `=`.\n>>> x = 1 if False else y = 2\n  File \"<stdin>\", line 1\nSyntaxError: cannot assign to conditional expression\n\n>>> # If we parenthesize it instead...\n>>> (x = 1) if False else (y = 2)\n  File \"<stdin>\", line 1\n    (x = 1) if False else (y = 2)\n       ^\nSyntaxError: invalid syntax\n```\n(In 3.8 and above, the `:=` \"walrus\" operator allows simple assignment of values *as an expression*, which is then compatible with this syntax. But please don't write code like that; it will quickly become very difficult to understand.)\n\nSimilarly, because it is an expression, the `else` part is *mandatory*:\n```\n# Invalid syntax: we didn't specify what the value should be if the \n# condition isn't met. It doesn't matter if we can verify that\n# ahead of time.\na if True\n```\nYou can, however, use conditional expressions to assign a variable like so:\n```python\nx = a if True else b\n```\nOr for example to return a value:\n```python\n# Of course we should just use the standard library `max`;\n# this is just for demonstration purposes.\ndef my_max(a, b):\n    return a if a > b else b\n```\nThink of the conditional expression as switching between two values. We can use it when we are in a 'one value or another' situation, where we will *do the same thing* with the result, regardless of whether the condition is met. We use the expression to compute the value, and then do something with it. If you need to *do something different* depending on the condition, then use a normal `if` **statement** instead.\n\n----------\n\nKeep in mind that it's frowned upon by some Pythonistas for several reasons:\n\n- The order of the arguments is different from those of the classic `condition ? a : b` ternary operator from many other languages (such as [C][3], [C++][4], [Go][5], [Perl][6], [Ruby][7], [Java][8], [JavaScript][9], etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour use it (they may reverse the argument order).\n- Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).\n- Stylistic reasons. (Although the 'inline `if`' can be *really* useful, and make your script more concise, it really does complicate your code)\n\nIf you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, `x = 4 if b > 8 else 9` is read aloud as `x will be 4 if b is greater than 8 otherwise 9`.\n\nOfficial documentation:\n\n- [Conditional expressions][10]\n- [Is there an equivalent of C’s ”?:” ternary operator?][11]\n\n  [1]: https://mail.python.org/pipermail/python-dev/2005-September/056846.html \"[Python-Dev] Conditional Expression Resolution\"\n  [2]: https://en.wikipedia.org/wiki/Boolean_data_type \"Boolean data type\"\n  [3]: https://en.wikipedia.org/wiki/C_%28programming_language%29\n  [4]: https://en.wikipedia.org/wiki/C%2B%2B\n  [5]: https://en.wikipedia.org/wiki/Go_%28programming_language%29\n  [6]: https://en.wikipedia.org/wiki/Perl\n  [7]: https://en.wikipedia.org/wiki/Ruby_%28programming_language%29\n  [8]: https://en.wikipedia.org/wiki/Java_%28programming_language%29\n  [9]: https://en.wikipedia.org/wiki/JavaScript\n  [10]: https://docs.python.org/3/reference/expressions.html#conditional-expressions \"Conditional expressions\"\n  [11]: https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator \"Is there an equivalent of C’s ”?:” ternary operator?\"",
        "votes": 65,
        "accepted": 1,
        "comments": [
          {
            "content": "Be careful with order of operations when using this. For example, the line z = 3 + x if x < y else y. If x=2 and y=1, you might expect that to yield 4, but it would actually yield 1. z = 3 + (x if x > y else y) is the correct usage.",
            "votes": 7
          }
        ]
      },
      {
        "content": "You can index into a tuple:\n```python\n(falseValue, trueValue)[test]\n```\n`test` needs to return _True_ or _False_.  \nIt might be safer to always implement it as:\n```python\n(falseValue, trueValue)[test == True]\n```\nor you can use the built-in [`bool()`][2] to assure a [Boolean][1] value:\n```python\n(falseValue, trueValue)[bool(<expression>)]\n```\n[1]: https://en.wikipedia.org/wiki/Boolean_data_type \"Boolean data type\"\n[2]: https://docs.python.org/3.3/library/functions.html#bool \"bool\"",
        "votes": 43,
        "accepted": 0,
        "comments": [
          {
            "content": "Note that this one always evaluates everything, whereas the if/else construct only evaluates the winning expression.",
            "votes": 11
          }
        ]
      }
    ]
  }
]